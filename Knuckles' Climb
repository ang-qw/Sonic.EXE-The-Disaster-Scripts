-- Climb (Movilidad) para Knuckles
-- Descripción:
-- Knuckles, al colisionar con una pared, puede activar la habilidad "Climb" mediante el botón.
-- Durante la habilidad se le aplica una fuerza ascendente constante para escalar la pared.
-- Solo podrá permanecer en la pared por un máximo de 5 segundos o hasta que salte.
-- Al terminar, se activa un cooldown de 37 segundos.
-- Icono: rbxassetid://138006262115181

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")
local runService = game:GetService("RunService")
local userInputService = game:GetService("UserInputService")
local repStorage = game:GetService("ReplicatedStorage")

-- Exclusividad para Knuckles (se asume que existe "displayPlayers" en ReplicatedStorage)
local displayPlayers = repStorage:WaitForChild("displayPlayers")
local playerStats = displayPlayers:FindFirstChild(player.Name):WaitForChild("stats")
local characterValue = playerStats:WaitForChild("character")
if characterValue.Value:lower() ~= "knuckles" then
	return
end

-- Variables de la habilidad
local climbSpeed = 25
local climbForce = Vector3.new(0, climbSpeed, 0)
local wallDetectionDistance = 2.5
local isClimbing = false
local climbStartTime = 0
local maxClimbTime = 5          -- Máximo 5 segundos en la pared
local climbCooldownTime = 37    -- Cooldown de 37 segundos
local isCooldown = false

-- Cargar animación de Climb
local climbAnimationId = "rbxassetid://133083776097731"
local animator = humanoid:FindFirstChildOfClass("Animator") or humanoid:WaitForChild("Animator")
local climbAnimation = Instance.new("Animation")
climbAnimation.AnimationId = climbAnimationId
local climbTrack = animator:LoadAnimation(climbAnimation)

-- Función para detectar si hay pared en frente
local function isNearWall()
    local direction = rootPart.CFrame.LookVector * wallDetectionDistance
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    local result = workspace:Raycast(rootPart.Position, direction, raycastParams)
    return result ~= nil
end

-- Preparación de la interfaz embellecida (inspirada en el botón "Glide")
local screenGui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
screenGui.Name = "ClimbGUI"

-- Se posiciona el contenedor para que no se superponga a otros botones (por ejemplo, de Punch Impulse)
local container = Instance.new("Frame")
container.Size = UDim2.new(0, 60, 0, 60)
container.Position = UDim2.new(1, -80, 0.75, -30)  -- Posición ajustada
container.BackgroundTransparency = 1
container.Parent = screenGui
container.ZIndex = 100

local titleLabel = Instance.new("TextLabel")
titleLabel.Size = UDim2.new(0, 60, 0, 20)
titleLabel.Position = UDim2.new(0, 0, -0.4, 0)
titleLabel.BackgroundTransparency = 1
titleLabel.Text = "Climb"
titleLabel.TextScaled = true
titleLabel.TextColor3 = Color3.new(1, 1, 1)
titleLabel.FontFace = Font.new("rbxassetid://12187371840", Enum.FontWeight.Bold, Enum.FontStyle.Normal)
titleLabel.TextStrokeTransparency = 0
titleLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
titleLabel.Parent = container
titleLabel.ZIndex = 105

local shadowStain = Instance.new("Frame")
shadowStain.Size = UDim2.new(1, 10, 1, 10)
shadowStain.Position = UDim2.new(0, -5, 0, -5)
shadowStain.BackgroundColor3 = Color3.new(0, 0, 0)
shadowStain.BackgroundTransparency = 1
shadowStain.Parent = container

local stainGradient = Instance.new("UIGradient", shadowStain)
stainGradient.Rotation = 45
stainGradient.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.new(0, 0, 0)),
    ColorSequenceKeypoint.new(1, Color3.new(0, 0, 0))
})
stainGradient.Transparency = NumberSequence.new({
    NumberSequenceKeypoint.new(0, 0.3),
    NumberSequenceKeypoint.new(1, 1)
})

local outerBorder = Instance.new("Frame")
outerBorder.Size = UDim2.new(1, 0, 1, 0)
outerBorder.Position = UDim2.new(0, 0, 0, 0)
outerBorder.BackgroundColor3 = Color3.fromRGB(139, 0, 0)
outerBorder.Parent = container
outerBorder.ZIndex = 101

local outerCorner = Instance.new("UICorner", outerBorder)
outerCorner.CornerRadius = UDim.new(1, 0)

local outerGradient = Instance.new("UIGradient", outerBorder)
outerGradient.Rotation = 90
outerGradient.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.fromRGB(139, 0, 0)),
    ColorSequenceKeypoint.new(0.5, Color3.fromRGB(170, 0, 0)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(139, 0, 0))
})
outerGradient.Transparency = NumberSequence.new({
    NumberSequenceKeypoint.new(0, 0),
    NumberSequenceKeypoint.new(0.5, 0),
    NumberSequenceKeypoint.new(1, 0)
})

local innerBorder = Instance.new("Frame")
innerBorder.Size = UDim2.new(1, -8, 1, -8)
innerBorder.Position = UDim2.new(0, 4, 0, 4)
innerBorder.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
innerBorder.Parent = outerBorder
innerBorder.ZIndex = 102

local innerCorner = Instance.new("UICorner", innerBorder)
innerCorner.CornerRadius = UDim.new(1, 0)

local innerGradient = Instance.new("UIGradient", innerBorder)
innerGradient.Rotation = 90
innerGradient.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.fromRGB(50, 50, 50)),
    ColorSequenceKeypoint.new(0.5, Color3.fromRGB(100, 100, 100)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(50, 50, 50))
})
innerGradient.Transparency = NumberSequence.new({
    NumberSequenceKeypoint.new(0, 0),
    NumberSequenceKeypoint.new(0.5, 0),
    NumberSequenceKeypoint.new(1, 0)
})

local effectFrame = Instance.new("Frame")
effectFrame.Size = UDim2.new(1, -6, 1, -6)
effectFrame.Position = UDim2.new(0, 3, 0, 3)
effectFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
effectFrame.Parent = innerBorder
effectFrame.ZIndex = 103

local effectCorner = Instance.new("UICorner", effectFrame)
effectCorner.CornerRadius = UDim.new(1, 0)

local effectFrameGradient = Instance.new("UIGradient", effectFrame)
effectFrameGradient.Rotation = 90
-- Valor por defecto: blanco
effectFrameGradient.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.fromRGB(255,255,255)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(255,255,255))
})
effectFrameGradient.Transparency = NumberSequence.new({
    NumberSequenceKeypoint.new(0, 0),
    NumberSequenceKeypoint.new(1, 0)
})

local shadowAsset = Instance.new("ImageLabel")
shadowAsset.Size = UDim2.new(1, 10, 1, 10)
shadowAsset.Position = UDim2.new(0, -5, 0, -5)
shadowAsset.BackgroundTransparency = 1
shadowAsset.Image = "rbxassetid://114739599325115"
shadowAsset.ImageTransparency = 0.1
shadowAsset.Parent = effectFrame
shadowAsset.ZIndex = 102

local shadowAssetGradient = Instance.new("UIGradient", shadowAsset)
shadowAssetGradient.Rotation = 90
shadowAssetGradient.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.fromRGB(220,220,220)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(220,220,220))
})
shadowAssetGradient.Transparency = NumberSequence.new({
    NumberSequenceKeypoint.new(0, 0),
    NumberSequenceKeypoint.new(1, 0)
})

local iconLabel = Instance.new("ImageLabel")
iconLabel.Size = UDim2.new(1, 0, 1, 0)
iconLabel.Position = UDim2.new(0, 0, 0, 0)
iconLabel.BackgroundTransparency = 1
iconLabel.Image = "rbxassetid://138006262115181"  -- Icono para Climb
iconLabel.ImageColor3 = Color3.fromRGB(255,255,255)
iconLabel.Parent = effectFrame
iconLabel.ZIndex = 103

local iconGradient = Instance.new("UIGradient", iconLabel)
iconGradient.Rotation = 90
iconGradient.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.fromRGB(0,0,0)),
    ColorSequenceKeypoint.new(0.5, Color3.fromRGB(150,150,150)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(0,0,0))
})
iconGradient.Transparency = NumberSequence.new({
    NumberSequenceKeypoint.new(0, 0),
    NumberSequenceKeypoint.new(1, 0.55)
})

-- Contador de cooldown (se muestra durante el enfriamiento)
local cooldownText = Instance.new("TextLabel")
cooldownText.Size = UDim2.new(0, 30, 0, 30)
cooldownText.Position = UDim2.new(0.5, -15, 0.5, -15)
cooldownText.BackgroundTransparency = 1
cooldownText.TextScaled = true
cooldownText.FontFace = Font.new("rbxassetid://12187371840", Enum.FontWeight.Bold, Enum.FontStyle.Normal)
cooldownText.TextColor3 = Color3.new(1,1,1)
cooldownText.Visible = false
cooldownText.Parent = container
cooldownText.ZIndex = 104

local buttonOverlay = Instance.new("ImageButton")
buttonOverlay.Size = UDim2.new(1, 0, 1, 0)
buttonOverlay.Position = UDim2.new(0, 0, 0, 0)
buttonOverlay.BackgroundTransparency = 1
buttonOverlay.Parent = container
buttonOverlay.Draggable = true
buttonOverlay.Active = true
buttonOverlay.Visible = true
buttonOverlay.ZIndex = 105

-------------------------------------------------
-- Funciones de la habilidad
-------------------------------------------------

-- Inicia la escalada (solo si se está colisionando con pared)
local function startClimbing()
    if not isNearWall() then return end
    isClimbing = true
    climbStartTime = tick()
    -- Al activar, se cambia el gradiente a verde (activo)
    effectFrameGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255,255,255)),
        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0,255,0)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255,255,255))
    })
    climbTrack:Play()
    
    spawn(function()
        while isClimbing and isNearWall() do
            if tick() - climbStartTime >= maxClimbTime then
                break
            end
            rootPart.Velocity = climbForce
            wait(0.05)
        end
        isClimbing = false
        climbTrack:Stop()
        -- Al finalizar la escalada, se activa el cooldown y se cambia el gradiente a rojo
        effectFrameGradient.Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(255,255,255)),
            ColorSequenceKeypoint.new(0.5, Color3.fromRGB(255,0,0)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(255,255,255))
        })
        isCooldown = true
        cooldownText.Visible = true
        for i = climbCooldownTime, 1, -1 do
            cooldownText.Text = tostring(i)
            wait(1)
        end
        cooldownText.Visible = false
        isCooldown = false
        -- Restablece el gradiente a blanco cuando el cooldown termina
        effectFrameGradient.Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(255,255,255)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(255,255,255))
        })
    end)
end

-- Función para intentar activar Climb (solo si se está colisionando con una pared y sin cooldown)
local function toggleClimbing()
    if isCooldown then return end
    if not isNearWall() then return end
    if not isClimbing then
        startClimbing()
    end
end

-- Permite desactivar Climb si el jugador salta
userInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.Space and isClimbing then
        isClimbing = false
        climbTrack:Stop()
    end
end)

-------------------------------------------------
-- Conexión del botón (embellecido y draggable)
-------------------------------------------------
buttonOverlay.MouseButton1Click:Connect(toggleClimbing)

local dragging, dragInput, dragStart, startPos
buttonOverlay.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = buttonOverlay.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

buttonOverlay.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

userInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        local delta = input.Position - dragStart
        buttonOverlay.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)
